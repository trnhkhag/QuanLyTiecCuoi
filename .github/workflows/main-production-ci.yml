name: Main Production CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: prod-${{ github.sha }}

jobs:
  build-and-push-prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Create the environment files from secrets
      - name: Create environment files
        run: |
          # Create client .env.production
          echo "${{ secrets.CLIENT_ENV_PRODUCTION }}" > ./client/.env.production
          
          # Create server .env.production
          echo "${{ secrets.SERVER_ENV_PRODUCTION }}" > ./server/.env.production

      - name: Build and push client production image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/qltc-client:latest
            ${{ secrets.DOCKER_USERNAME }}/qltc-client:${{ github.sha }}
          build-args: |
            REACT_APP_API_URL=http://34.70.80.83:3001/api
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-client:buildcache,mode=max

      - name: Build and push server production image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/qltc-server:latest
            ${{ secrets.DOCKER_USERNAME }}/qltc-server:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-server:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/qltc-server:buildcache,mode=max

  deploy-to-server:
    needs: build-and-push-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          timeout: 60s
          command_timeout: 10m
          script: |
            # Navigate to project directory
            cd ${{ secrets.PROJECT_PATH }}
            
            # Ensure we're in the right directory
            pwd
            
            # Pull latest code from main branch
            git pull origin main
            
            # Create .env file
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${{ github.sha }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USER=${{ secrets.DB_USER }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Start containers
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -af

      - name: Verify deployment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          timeout: 60s
          command_timeout: 5m
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            
            # Wait for services to be ready
            sleep 30
            
            # Check if services are running
            docker-compose -f docker-compose.prod.yml ps
            
            # Check service health
            curl -f http://localhost:80 || echo "Frontend health check failed"
            curl -f http://localhost:3001/health || echo "Backend health check failed" 